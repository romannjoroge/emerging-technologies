{"version":3,"sources":["../src/index.ts","../src/types.ts","../src/routes.ts"],"sourcesContent":["import express, { json } from \"express\";\nimport {\n  createPassword,\n  getPassword,\n  deletePassword,\n  updatePassword,\n  initializePasswords,\n  getPasswords,\n} from \"./routes\";\nimport { Password, passwordschema, PasswordType, initSchema } from \"./types\";\nimport fs from \"fs\";\nimport _ from \"lodash\";\nimport cors from \"cors\";\nimport \"dotenv/config\";\nconst app = express();\n\nconst FLAG_FILE = \"init_done.flag\";\n(function safeInitializePasswords() {\n  if (!fs.existsSync(FLAG_FILE)) {\n    initializePasswords();\n    fs.writeFileSync(FLAG_FILE, \"Initialization complete\");\n  }\n})();\nfunction cleanup() {\n  if (fs.existsSync(FLAG_FILE)) {\n    fs.unlinkSync(FLAG_FILE);\n    console.log(\"Cleanup complete: Flag file deleted.\");\n  }\n}\n\nprocess.on(\"SIGINT\", () => {\n  console.log(\"SIGINT received: Shutting down gracefully...\");\n  cleanup();\n  process.exit(0);\n});\n\nprocess.on(\"exit\", () => {\n  console.log(\"Process exiting: Performing cleanup...\");\n  cleanup();\n});\napp.use(\"/\", cors({ origin: \"*\" }), json());\napp.get(\"/\", (req, res) => {\n  res.json({ msg: \"test\" });\n});\n//@ts-ignore\napp.get(\"/get\", async (req, res) => {\n  try {\n    const result = await getPasswords();\n    // console.log(\"data=>\", result.data);\n    res.status(200).send(result.data);\n  } catch (e) {\n    console.log(e);\n    return res.status(400).json({ error: e });\n  }\n});\n\n//@ts-ignore\napp.get(\"/get/:service\", async (req, res) => {\n  const { service } = req.params;\n  if (!service || service === \"\" || _.isString(service)) {\n    return res\n      .status(400)\n      .json({ error: \"service is required, should be a string\" });\n  }\n  try {\n    const result = await getPassword(service);\n\n    return res.status(200).send(result.data);\n  } catch (e) {\n    return res.status(400).json({ error: e });\n  }\n});\n//@ts-ignore\napp.post(\"/add\", async (req, res) => {\n  try {\n    const body = req.body;\n    let data = passwordschema.safeParse(body);\n    if (!data.success) {\n      return res.status(400).json({ error: data.error });\n    }\n    let parsed = data.data;\n    const result = await createPassword(parsed);\n    return res\n      .status(201)\n      .send({ data: result.data, message: \"Password created\" });\n  } catch (e) {\n    return res.status(400).json({ error: e });\n  }\n});\n\n//@ts-ignore\n\napp.delete(\"/delete/:id\", async (req, res) => {\n  try {\n    const { id } = req.params;\n    if (!id || _.isNumber(id)) {\n      return res\n        .status(400)\n        .json({ error: \"id is required, should be a number\" });\n    }\n    const result = await deletePassword(id);\n    return res\n      .status(201)\n      .send({ data: result.data, message: \"Password deleted\" });\n  } catch (error) {\n    return res.status(400).json({ error: error });\n  }\n});\n\n//@ts-ignore\napp.patch(\"/update/:id\", async (req, res) => {\n  try {\n    const { id } = req.params;\n    if (!id || _.isNumber(id)) {\n      return res\n        .status(400)\n        .json({ error: \"id is required, should be a number\" });\n    }\n    const body = req.body;\n    let data = passwordschema.safeParse(body);\n    if (!data.success) {\n      return res.status(400).json({ error: data.error });\n    }\n    let parsed = data.data;\n    const result = await updatePassword(parsed, id);\n    return res\n      .status(201)\n      .send({ data: result.data, message: \"Password updated\" });\n  } catch (error) {\n    return res.status(400).json({ error: error });\n  }\n});\n\nconst port = process.env.PORT ?? \"5000\";\napp.listen(port, () => {\n  console.log(\"server is listening on port:\" + port);\n});\n","import { z } from \"zod\";\nexport interface Password {\n  email?: string;\n  password: string;\n  note?: string;\n  service: string;\n  usename?: string;\n}\nexport const passwordschema = z.object({\n  email: z.string().optional(),\n  password: z.string(),\n  note: z.string().optional(),\n  service: z.string(),\n  username: z.string().optional(),\n});\nexport const initSchema = z.object({\n  clock: z.record(z.string(), z.number()),\n  clientName: z.string(),\n  neighbours: z.array(\n    z.object({\n      name: z.string(),\n      address: z.string(),\n    }),\n  ),\n});\nexport type InitType = z.infer<typeof initSchema>;\nexport type PasswordType = z.infer<typeof passwordschema>;\nexport const BASE_HOST = \"http://localhost:3000\";\n","import { BASE_HOST, PasswordType, InitType } from \"./types\";\nimport * as crypto from \"node:crypto\";\nimport axios from \"axios\";\nexport async function createPassword(password: PasswordType) {\n  try {\n    return await axios.post(`${BASE_HOST}/add`, password);\n  } catch (e) {\n    console.log(e);\n    throw e;\n  }\n}\nexport async function updatePassword(password: PasswordType, id: string) {\n  try {\n    return await axios.patch(`${BASE_HOST}/update/${id}`, password);\n  } catch (e) {\n    console.log(e);\n    throw e;\n  }\n}\nexport async function deletePassword(id: string) {\n  try {\n    return await axios.delete(`${BASE_HOST}/delete/${id}`);\n  } catch (e) {\n    console.log(e);\n    throw e;\n  }\n}\nexport async function getPassword(service: string) {\n  try {\n    return await axios.get(`${BASE_HOST}/get/${service}`);\n  } catch (e) {\n    console.log(e);\n    throw e;\n  }\n}\nexport async function getPasswords() {\n  try {\n    return await axios.get(`${BASE_HOST}/get`);\n  } catch (e) {\n    console.log(e);\n    throw e;\n  }\n}\nexport async function initializePasswords() {\n  const init: InitType = {\n    clientName: crypto.randomBytes(20).toString(\"hex\"),\n    clock: {},\n    neighbours: [],\n  };\n  console.log(\"Ran initializePasswords\");\n  return await axios.post(`${BASE_HOST}/initialize`, init);\n}\n"],"mappings":"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","names":[]}